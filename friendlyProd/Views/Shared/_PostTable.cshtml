@using System.Security.Claims
@using friendly.Models
@using Microsoft.AspNetCore.Identity
@inject UserManager<User> UserManager

<style>
    /* Styles for the like and unlike button functionality */
    .like-buttons {
        display: flex;
        align-items: center; /* Center items vertically */
    }

    button.like-button,
    button.unlike-button {
        background: transparent; /* Makes the button visually blend with the background */
        border: none; /* Removes border styling */
        outline: none;
        box-shadow: none;
        padding: 0; /* Ensures there is no internal padding */
        cursor: pointer; /* Makes the button interactive */
    }

    button.like-button i,
    button.unlike-button i {
        font-size: 25px; /* Adjust icon size for visibility */
        padding: 0; /* Removes extra padding around icons */
        margin-right: 10px; /* Adds spacing between icon and text */
    }

    button.unlike-button i {
        color: red; /* Indicates the unlike button visually */
    }

    button:focus {
        outline: none; /* Removes the focus outline for aesthetic purposes */
    }

    .likes-count {
        font-size: 16px; /* Font size for the likes count display */
        display: inline-block; /* Ensures proper alignment with buttons */
        vertical-align: middle; /* Aligns text with icons */
    }
</style>

<table class="table table-striped">
    @{
        var currentUser = await UserManager.GetUserAsync(User); // Get the currently logged-in user
    }
    @foreach (var post in Model) // Iterate through each post in the model
    {
        // Determine if the current user has liked the post; change the heart icon accordingly
        var heartClass = ((List<Like>)post.Likes).Any(l => l.UserId == User.FindFirst(ClaimTypes.NameIdentifier)?.Value) ? "fas" : "far";

        <tr>
            <td colspan="5">
                <!-- Encapsulate the post structure for alignment and layout -->
                <div class="container">
                    <div class="row align-items-start">
                        <!-- Left column for post image and like functionality -->
                        <div class="col-md-6">
                            <!-- Display the post image -->
                            <img src="@post.PostImagePath" alt="Post Image" class="img-fluid" style="height: 400px; object-fit: cover;" />

                            <!-- Like/Unlike functionality -->
                            <div class="like-buttons">
                                <button class="like-button" data-post-id="@post.PostId" data-user-id="@User.FindFirst(ClaimTypes.NameIdentifier)?.Value" style="display: @(heartClass == "fas" ? "none" : "block")">
                                    <i class="@heartClass fa-heart"></i> <!-- Icon changes based on whether the post is liked -->
                                </button>
                                <button class="unlike-button" data-post-id="@post.PostId" data-user-id="@User.FindFirst(ClaimTypes.NameIdentifier)?.Value" style="display: @(heartClass == "fas" ? "block" : "none")">
                                    <i class="fas fa-heart"></i>
                                </button>
                                <!-- Display the current number of likes -->
                                <span id="likes-count-@post.PostId">@post.Likes.Count Likes</span>
                            </div>

                            <!-- Post caption -->
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="d-flex align-items-center mb-3">
                                    <!-- User profile image -->
                                    @if (post.User != null && !string.IsNullOrEmpty(post.User.ProfileImageUrl))
                                    {
                                        <img alt="@post.User.UserName" 
                                            src="@post.User.ProfileImageUrl" 
                                            class="img-fluid rounded-circle" 
                                            style="width: 35px; height: 35px; object-fit: cover; margin-right: 10px;" /> <!-- Display user's profile image -->                       
                                    }
                                    else
                                    {
                                        <img alt="No Profile Image" 
                                            src="/uploads/profile-images/defaultprofileimage.jpg" 
                                            class="img-fluid rounded-circle" 
                                            style="width: 35px; height: 35px; object-fit: cover; margin-right: 10px;" /> <!-- Display a default profile image -->
                                    }
                                    <div>
                                        <strong>
                                            <a asp-controller="User" asp-action="Details" asp-route-id="@post.UserId" class="text-dark" style="text-decoration: none; font-size: 1.1rem;">
                                                @post.User.UserName <!-- Link to the user's profile -->
                                            </a>
                                        </strong>
                                        <span class="text-muted" style="margin-left: 5px;">@post.Caption</span>
                                    </div>
                                </div>
                            </div>

                            <!-- Post creation date -->
                            <p>
                                <small class="text-muted">@post.PostDate</small>
                            </p>

                            <!-- Edit/Delete actions visible only to the post owner -->
                            <div id="actions-@post.PostId" class="mt-3">
                                @if (currentUser != null && post.UserId == currentUser.Id)
                                {
                                    <a asp-action="Update" asp-route-id="@post.PostId" class="btn btn-primary btn-sm">Edit Caption</a>
                                    <a asp-action="Delete" asp-route-id="@post.PostId" class="btn btn-danger btn-sm">Delete Post</a>
                                }
                            </div>
                        </div>

                        <!-- Right column for comments -->
                        <div class="col-md-6">
                            <!-- Display comments if available -->
                            <div>
                                @if (post.Comments != null && post.Comments.Count > 0)
                                {
                                    <ul style="list-style-type:none; padding-left:0;"> <!-- Unordered list without bullet points -->
                                        @foreach (var comment in post.Comments)
                                        {
                                            <li class="mb-2">
                                                <div class="d-flex justify-content-between align-items-center">
                                                    <!-- Comment content -->
                                                    <p class="mb-0">
                                                        <strong>
                                                            <a asp-controller="User" asp-action="Details" asp-route-id="@comment.UserId" 
                                                                class="text-dark" style="text-decoration: none;">
                                                                @comment.User.UserName <!-- Display comment author -->
                                                            </a>                                                    
                                                        </strong>
                                                        <span>@comment.CommentText</span> <!-- Comment text -->
                                                        <small class="text-muted">(@comment.CommentDate)</small> <!-- Comment date -->
                                                    </p>

                                                    <!-- Edit and Delete buttons for comment, visible only to its author -->
                                                    @if (currentUser != null && comment.UserId == currentUser.Id)
                                                    {
                                                        <div class="mt-3">
                                                            <a asp-controller="Comment" asp-action="Update" asp-route-id="@comment.CommentId" class="btn btn-primary btn-sm">Edit</a>
                                                            <form asp-controller="Comment" asp-action="DeleteConfirmed" asp-route-id="@comment.CommentId" class="d-inline">
                                                                <button type="submit" class="btn btn-danger btn-sm">Delete</button>
                                                            </form>
                                                        </div>
                                                    }
                                                </div>
                                            </li>
                                        }
                                    </ul>
                                }
                                else
                                {
                                    <span><i>No comments yet</i></span>
                                }
                            </div>

                            <!-- Comment submission form -->
                            <div class="mt-3">
                                <form asp-controller="Comment" asp-action="Create" method="post">
                                    <input type="hidden" name="PostId" value="@post.PostId" /> <!-- Hidden input for post ID -->
                                    <textarea class="form-control" name="CommentText" rows="2" placeholder="Write a comment..."></textarea> <!-- Input field for new comments -->
                                    <div class="d-flex justify-content-end mt-2">
                                        <button type="submit" class="btn btn-secondary btn-sm">Post Comment</button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </td>
        </tr>
        <tr>
            <td colspan="5" style="height:20px;"></td> <!-- Spacing row between posts -->
        </tr>
    }
</table>

<script>
$(document).ready(function() {
    // Event delegation for like and unlike buttons
    $(document).on('click', '.like-button', function() {
        var postId = $(this).data('post-id');
        var userId = $(this).data('user-id');
        var heartIcon = $(this).find('i'); // Get the heart icon element

        $.ajax({
            type: 'POST',
            url: '/Like/Create',
            data: { postId: postId, userId: userId },
            success: function(response) {
                showMessage("Post liked!", heartIcon);
                // Update the likes count for the specific post
                var likesCountElement = $('#likes-count-' + postId);
                var currentCount = parseInt(likesCountElement.text());
                likesCountElement.text(currentCount + 1 + ' Likes');

                // Hide the like button and show the unlike button
                $('.like-button[data-post-id="' + postId + '"]').hide();
                $('.unlike-button[data-post-id="' + postId + '"]').show();

                // Change the heart icon class to represent "liked"
                $('.like-button[data-post-id="' + postId + '"] i').removeClass('far').addClass('fas');
                $('.unlike-button[data-post-id="' + postId + '"] i').removeClass('far').addClass('fas');
            },
            error: function(xhr, status, error) {
                showMessage("Failed to like the post: " + error, heartIcon);
            }
        });
    });

    $(document).ready(function() {
    $('.like-buttons').each(function() {
        var postId = $(this).find('.like-button').data('post-id');

        // Fetch likes count for the post
        $.ajax({
            type: 'GET',
            url: '/Like/GetLikesCount',
            data: { postId: postId },
            success: function(count) {
                $('#likes-count-' + postId).text(count + ' Likes'); // Update the likes count displayed
            },
            error: function() {
                console.error('Failed to fetch likes count');
            }
        });
    });
});


    $(document).on('click', '.unlike-button', function() {
        var postId = $(this).data('post-id');
        var userId = $(this).data('user-id');
        var heartIcon = $('.unlike-button[data-post-id="' + postId + '"]').find('i'); // Get the heart icon element from the like button


        $.ajax({
            type: 'POST',
            url: '/Like/DeleteConfirmed',
            data: { postId: postId, userId: userId },
            success: function(response) {
                showMessage("Post unliked!", heartIcon);

                // Update the likes count for the specific post
                var likesCountElement = $('#likes-count-' + postId);
                var currentCount = parseInt(likesCountElement.text());
                likesCountElement.text(currentCount - 1 + ' Likes');

                // Hide the unlike button and show the like button
                $('.unlike-button[data-post-id="' + postId + '"]').hide();
                $('.like-button[data-post-id="' + postId + '"]').show();

                // Change the heart icon class to represent "not liked"
                $('.like-button[data-post-id="' + postId + '"] i').removeClass('fas').addClass('far');
                $('.unlike-button[data-post-id="' + postId + '"] i').removeClass('fas').addClass('far');
            },
            error: function(xhr, status, error) {
                showMessage("Failed to unlike the post: " + error, heartIcon);
            }
        });
    });
});

// Modified showMessage function to position beside the heart icon
function showMessage(message, heartIcon) {
    // Create a div for the message if it doesn't exist
    if ($('#message-box').length === 0) {
        $('body').append('<div id="message-box" style="position: absolute; background-color: #4CAF50; color: white; padding: 5px; border-radius: 5px; z-index: 1000;">' + message + '</div>');
    } else {
        $('#message-box').text(message);
    }

    // Calculate position based on the heart icon's position
    var offset = heartIcon.offset();
    $('#message-box').css({
        top: offset.top - 40, // Position above the heart icon
        left: offset.left + heartIcon.width() + 5 // Position to the right of the heart icon
    });

    // Show the message and hide it after 2 seconds
    $('#message-box').fadeIn(300).delay(2000).fadeOut(200, function() {
        $(this).remove(); // Remove the message box after fading out
    });
}
</script>